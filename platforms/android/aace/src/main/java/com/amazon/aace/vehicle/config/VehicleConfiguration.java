/*
 * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package com.amazon.aace.vehicle.config;

import com.amazon.aace.core.config.EngineConfiguration;
import com.amazon.aace.core.config.StreamConfiguration;

import org.json.JSONObject;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

/**
 * The @c VehicleConfiguration class is a factory interface for creating Vehicle service configuration objects.
 */
public class VehicleConfiguration
{
    /**
     * The enum VehiclePropertyType defines the different vehicle info values that can be set.
     */
    public enum VehiclePropertyType
    {
        /**
         * Vehicle make.
         * @hideinitializer
         */
        MAKE("MAKE","make"),
        /**
         * Vehicle model.
         * @hideinitializer
         */
        MODEL("MODEL","model"),
        /**
         * Vehicle year.
         * @hideinitializer
         */
        YEAR("YEAR","year"),
        /**
         * Vehicle trim.
         * @hideinitializer
         */
        TRIM("TRIM","trim"),
        /**
         * Vehicle geography.
         * @hideinitializer
         */
        GEOGRAPHY("GEOGRAPHY","geography"),
        /**
         * Software version.
         * @hideinitializer
         */
        VERSION("VERSION","version"),
        /**
         * Software operating system.
         * @hideinitializer
         */
        OPERATING_SYSTEM("OPERATING_SYSTEM","os"),
        /**
         * Hardware architecture.
         * @hideinitializer
         */
        HARDWARE_ARCH("HARDWARE_ARCH","arch"),
        /**
         * Region language.
         * @hideinitializer
         */
        LANGUAGE("LANGUAGE","language");

        /**
         * @internal
         */
        private String m_name;

        /**
         * @internal
         */
        private String m_key;

        /**
         * @internal
         */
        private VehiclePropertyType( String name, String key ) {
            m_name = name;
            m_key = key;
        }

        /**
         * @internal
         */
        public String toString() {
            return m_name;
        }

        /**
         * @internal
         */
        public String getKey() {
            return m_key;
        }
    }

    static public class VehicleProperty
    {
        private VehiclePropertyType m_type;
        private String m_value;

        public VehicleProperty( VehiclePropertyType type, String value ) {
            m_type = type;
            m_value = value;
        }
    }

    /**
     * Factory method used to programmatically generate vehicle info configuration data.
     * The data generated by this method is equivalent to providing the following @c JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "aace.vehicle":
     *   {
     *      "info": {
     *          "make": "<MAKE>",
     *          "model": "<MODEL>",
     *          "year": "<YEAR>",
     *          "trim": "<TRIM>",
     *          "geography": "<GEOGRAPHY>",
     *          "version": "<SOFTWARE_VERSION>",
     *          "os": "<OPERATING_SYSTEM>",
     *          "arch": "<HARDWARE_ARCH>"
     *          "language": "<LANGUAGE>"
     *      }
     *   }
     * }
     * @endcode
     *
     * @param propertyList List of @c VehicleProperty and value pairs.
     */
    static public EngineConfiguration createVehicleInfoConfig( VehicleProperty[] propertyList )
    {
        EngineConfiguration authConfig = null;

        try
        {
            JSONObject config = new JSONObject();
            JSONObject aaceVehicleElement = new JSONObject();
            JSONObject infoElement = new JSONObject();

            for( VehicleProperty next : propertyList ) {
                infoElement.put( next.m_type.getKey(), next.m_value );
            }

            aaceVehicleElement.put( "info", infoElement );
            config.put( "aace.vehicle", aaceVehicleElement );

            String configStr = config.toString();
            InputStream is = new ByteArrayInputStream( configStr.getBytes( StandardCharsets.UTF_8.name() ) );

            authConfig = StreamConfiguration.create( is );
        }
        catch( Throwable ex ) {
            ex.printStackTrace();
        }

        return authConfig;
    }
};
