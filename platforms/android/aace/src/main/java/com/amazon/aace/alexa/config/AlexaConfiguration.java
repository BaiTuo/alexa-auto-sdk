/*
 * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package com.amazon.aace.alexa.config;

import android.util.Log;

import com.amazon.aace.core.config.EngineConfiguration;
import com.amazon.aace.core.config.StreamConfiguration;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

/**
 * A factory interface for creating Alexa configuration objects
 */
public class AlexaConfiguration {

    private static final String sTag = AlexaConfiguration.class.getSimpleName();

    /**
     * Factory method used to programmatically generate authorization configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "authDelegate":
     *   {
     *     "clientId": "<CLIENT_ID>",
     *     "clientSecret": "<CLIENT_SECRET>",
     *     "refreshToken": "<REFRESH_TOKEN>"
     *   }
     * }
     * @endcode
     *
     * @param  clientId The client ID used to authorize the client with AVS
     *
     * @param  clientSecret The client secret used to authorize the client with AVS
     *
     * @param  refreshToken The refresh token used to authorize the client with AVS
     */
    public static EngineConfiguration createAuthConfig( String clientId,
                                                        String clientSecret,
                                                        String refreshToken ) {
        EngineConfiguration authConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject authDelegateElement = new JSONObject();
            authDelegateElement.put( "clientId", clientId );
            authDelegateElement.put( "clientSecret", clientSecret );
            authDelegateElement.put( "refreshToken", refreshToken );

            config.put("authDelegate", authDelegateElement );

        } catch ( JSONException e ) { Log.e( sTag, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            authConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( sTag, e.getMessage() ); }

        return authConfig;
    }

    /**
     * Factory method used to programmatically generate device info configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "deviceInfo":
     *   {
     *     "deviceSerialNumber": "<DEVICE_SERIAL_NUMBER>"
     *     "clientId": "<CLIENT_ID>",
     *     "productId": "<PRODUCT_ID>"
     *   }
     * }
     * @endcode
     *
     * @param  deviceSerialNumber The device serial number used to authorize the client with AVS
     *
     * @param  clientId The client ID used to authorize the client with AVS
     *
     * @param  productId The product ID used to authorize the client with AVS
     */
    public static EngineConfiguration createDeviceInfoConfig( String deviceSerialNumber,
                                                              String clientId,
                                                              String productId ) {
        EngineConfiguration deviceConfig = null;

        JSONObject config = new JSONObject();
        try {

            JSONObject deviceInfoElement = new JSONObject();
            deviceInfoElement.put( "deviceSerialNumber", deviceSerialNumber );
            deviceInfoElement.put( "clientId", clientId );
            deviceInfoElement.put( "productId", productId );

            config.put("deviceInfo", deviceInfoElement );

        } catch ( JSONException e ) { Log.e( sTag, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            deviceConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( sTag, e.getMessage() ); }

        return deviceConfig;
    }

    /**
     * Factory method used to programmatically generate alerts configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "alertsCapabilityAgent":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>"
     *   }
     * }
     * @endcode
     *
     * @param  databaseFilePath The file path to the SQLite database used to store persistent alerts data.
     * The database will be created on initialization if it does not already exist.
     */
    public static EngineConfiguration createAlertsConfig( String databaseFilePath ) {

        EngineConfiguration alertsConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject alertsCapabilityAgentElement = new JSONObject();
            alertsCapabilityAgentElement.put( "databaseFilePath", databaseFilePath );
            config.put( "alertsCapabilityAgent", alertsCapabilityAgentElement );
        } catch ( JSONException e ) { Log.e( sTag, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            alertsConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( sTag, e.getMessage() ); }

        return alertsConfig;
    }

    /**
     * Factory method used to programmatically generate notifications configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "notifications":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>"
     *   }
     * }
     * @endcode
     *
     * @param  databaseFilePath The file path to the SQLite database used to store persistent notifications data.
     * The database will be created on initialization if it does not already exist.
     */
    public static EngineConfiguration createNotificationsConfig( String databaseFilePath ) {

        EngineConfiguration notificationsConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject notificationsElement = new JSONObject();
            notificationsElement.put( "databaseFilePath", databaseFilePath );
            config.put( "notifications", notificationsElement );
        } catch ( JSONException e ) { Log.e( sTag, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            notificationsConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( sTag, e.getMessage() ); }

        return notificationsConfig;
    }

    /**
     * Factory method used to programmatically generate certified sender configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "certifiedSender":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>"
     *   }
     * }
     * @endcode
     *
     * @param  databaseFilePath The file path to the SQLite database used to store persistent certified sender data.
     * The database will be created on initialization if it does not already exist.
     */
    public static EngineConfiguration createCertifiedSenderConfig( String databaseFilePath ) {
        EngineConfiguration certifiedSenderConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject certifiedSenderElement = new JSONObject();
            certifiedSenderElement.put( "databaseFilePath", databaseFilePath );
            config.put( "certifiedSender", certifiedSenderElement );
        } catch ( JSONException e ) { Log.e( sTag, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            certifiedSenderConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( sTag, e.getMessage() ); }

        return certifiedSenderConfig;
    }

    /**
     * Factory method used to programmatically generate CURL configuration data.
     * The 'libCurlUtils' sub-component of the global configuration supports the following options:
     * - CURLOPT_CAPATH If present, specifies a value for the libcurl property CURLOPT_CAPATH.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *     "libcurlUtils" : {
     *         "CURLOPT_CAPATH" : "<CA_CERTIFICATES_FILE_PATH>"
     *     }
     * }
     * @endcode
     *
     * @param  certsPath The file path to the directory holding CA certificates
     */
    public static EngineConfiguration createCurlConfig( String certsPath ) {
        EngineConfiguration curlConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject libcurlUtilsElement = new JSONObject();
            libcurlUtilsElement.put( "CURLOPT_CAPATH", certsPath );
            config.put( "libcurlUtils", libcurlUtilsElement );
        } catch ( JSONException e ) { Log.e( sTag, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            curlConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( sTag, e.getMessage() ); }

        return curlConfig;
    }

    /**
     * Factory method used to programmatically generate settings configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "settings": {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>",
     *     "defaultAVSClientSettings": {
     *        "locale": "<LOCALE>"
     *     }
     *   }
     * }
     * @endcode
     *
     * @param  databaseFilePath The file path to the SQLite database used to store persistent settings data.
     * The database will be created on initialization if it does not already exist.
     *
     * @param  locale The current locale setting on the client
     */
    public static EngineConfiguration createSettingsConfig( String databaseFilePath, String locale ) {
        EngineConfiguration settingsConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject settingsElement = new JSONObject();
            settingsElement.put( "databaseFilePath", databaseFilePath );
            config.put( "settings", settingsElement );
            JSONObject defaultAVSClientSettingsElement = new JSONObject();
            defaultAVSClientSettingsElement.put( "locale", locale );
            settingsElement.put( "defaultAVSClientSettings", defaultAVSClientSettingsElement );
        } catch ( JSONException e ) { Log.e( sTag, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            settingsConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( sTag, e.getMessage() ); }

        return settingsConfig;
    }

    /**
     * Factory method used to programmatically generate settings configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "settings": {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>",
     *     "defaultAVSClientSettings": {
     *        "locale": "<LOCALE>"
     *     }
     *   }
     * }
     * @endcode
     *
     * @param  databaseFilePath The file path to the SQLite database used to store persistent settings data.
     * The database will be created on initialization if it does not already exist.
     *
     * @param  locale The current locale setting on the client
     */
    public static EngineConfiguration createSettingsConfig( String databaseFilePath ) {
        return AlexaConfiguration.createSettingsConfig( databaseFilePath, "en-US" );
    }

    /**
     * Factory method used to programmatically generate misc storage configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "miscDatabase":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>",
     *   }
     * }
     * @endcode
     *
     * @param  databaseFilePath The file path to the SQLite database used to store persistent misc storage data.
     * The database will be created on initialization if it does not already exist.
     */
    public static EngineConfiguration createMiscStorageConfig( String databaseFilePath ) {
        EngineConfiguration miscStorageConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject miscStorageElement = new JSONObject();
            miscStorageElement.put( "databaseFilePath", databaseFilePath );
            config.put( "miscDatabase", miscStorageElement );
        } catch ( JSONException e ) { Log.e( sTag, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            miscStorageConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( sTag, e.getMessage() ); }

        return miscStorageConfig;
    }

    /**
     * Factory method used to programmatically generate system configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "aace.alexa": {
     *      "system": {
     *          "firmwareVersion": <FIRMWARE_VERSION>
     *      }
     *   }
     * }
     * @endcode
     *
     * @param  firmwareVersion The firmware version of the client device
     */
    public static EngineConfiguration createSystemConfig( int firmwareVersion ) {
        EngineConfiguration systemConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject aaceAlexaElement = new JSONObject();
            config.put( "aace.alexa", aaceAlexaElement );
            JSONObject systemElement = new JSONObject();
            systemElement.put( "firmwareVersion", firmwareVersion );
            aaceAlexaElement.put( "system", systemElement );
        } catch ( JSONException e ) { Log.e( sTag, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            systemConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( sTag, e.getMessage() ); }

        return systemConfig;
    }
}
