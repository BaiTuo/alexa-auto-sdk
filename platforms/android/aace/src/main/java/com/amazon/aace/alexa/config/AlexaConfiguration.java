/*
 * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package com.amazon.aace.alexa.config;

import com.amazon.aace.core.config.EngineConfiguration;
import com.amazon.aace.core.config.StreamConfiguration;

import org.json.JSONObject;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

/**
 * The @c AlexaConfiguration class is a factory interface for creating Alexa configuration objects.
 */
public class AlexaConfiguration {
    /**
     * Factory method used to programmatically generate authorization configuration data. The data generated by this method is equivalent to providing the following @c JSON values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "authDelegate":
     *   {
     *     "clientId": "<CLIENTID>",
     *     "clientSecret": "<CLIENTSECRET>",
     *     "refreshToken": "<REFRESHTOKEN>"
     *   }
     * }
     * @endcode
     *
     * @param [in] clientId The client id used to authorize your application to use AVS.
     * @param [in] clientSecret The client secret used to authorize your application to use AVS.
     * @param [in] refreshToken The refresh token used to authorize your application to use AVS.
     */
    static public EngineConfiguration createAuthConfig( String clientId, String clientSecret, String refreshToken )
    {
        EngineConfiguration authConfig = null;

        try
        {
            JSONObject config = new JSONObject();
            JSONObject authDelegateElement = new JSONObject();

            authDelegateElement.put( "clientId", clientId );
            authDelegateElement.put( "clientSecret", clientSecret );
            authDelegateElement.put( "refreshToken", refreshToken );

            config.put( "authDelegate", authDelegateElement );

            String configStr = config.toString();
            InputStream is = new ByteArrayInputStream( configStr.getBytes( StandardCharsets.UTF_8.name() ) );

            authConfig = StreamConfiguration.create( is );
        }
        catch( Throwable ex ) {
            ex.printStackTrace();
        }

        return authConfig;
    }

    /**
     * Factory method used to programmatically generate alerts configuration data. The data generated by this method is equivalent to providing the following @c JSON values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "alertsCapabilityAgent":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>",
     *   }
     * }
     * @endcode
     *
     * @param [in] databaseFilePath SQLite database path that is used to store persistent data. If the database does not exist it will be created on initialization.
     */
    static public EngineConfiguration createAlertsConfig( String databaseFilePath )
    {
        EngineConfiguration alertsConfig = null;

        try
        {
            JSONObject config = new JSONObject();
            JSONObject alertsCapabilityAgentElement = new JSONObject();

            alertsCapabilityAgentElement.put( "databaseFilePath", databaseFilePath );

            config.put( "alertsCapabilityAgent", alertsCapabilityAgentElement );

            String configStr = config.toString();
            InputStream is = new ByteArrayInputStream( configStr.getBytes( StandardCharsets.UTF_8.name() ) );

            alertsConfig = StreamConfiguration.create( is );
        }
        catch( Throwable ex ) {
            ex.printStackTrace();
        }

        return alertsConfig;
    }

    /**
     * Factory method used to programmatically generate notifications configuration data. The data generated by this method is equivalent to providing the following @c JSON values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "notifications":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>",
     *   }
     * }
     * @endcode
     *
     * @param [in] databaseFilePath SQLite database path that is used to store persistent data. If the database does not exist it will be created on initialization.
     */
    static public EngineConfiguration createNotificationsConfig( String databaseFilePath )
    {
        EngineConfiguration notificationsConfig = null;

        try
        {
            JSONObject config = new JSONObject();
            JSONObject notificationsElement = new JSONObject();

            notificationsElement.put( "databaseFilePath", databaseFilePath );

            config.put( "notifications", notificationsElement );

            String configStr = config.toString();
            InputStream is = new ByteArrayInputStream( configStr.getBytes( StandardCharsets.UTF_8.name() ) );

            notificationsConfig = StreamConfiguration.create( is );
        }
        catch( Throwable ex ) {
            ex.printStackTrace();
        }

        return notificationsConfig;
    }

    /**
     * Factory method used to programmatically generate certified sender configuration data. The data generated by this method is equivalent to providing the following @c JSON values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "certifiedSender":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>",
     *   }
     * }
     * @endcode
     *
     * @param [in] databaseFilePath SQLite database path that is used to store persistent data. If the database does not exist it will be created on initialization.
     */
    static public EngineConfiguration createCertifiedSenderConfig( String databaseFilePath )
    {
        EngineConfiguration certifiedSenderConfig = null;

        try
        {
            JSONObject config = new JSONObject();
            JSONObject certifiedSenderElement = new JSONObject();

            certifiedSenderElement.put( "databaseFilePath", databaseFilePath );

            config.put( "certifiedSender", certifiedSenderElement );

            String configStr = config.toString();
            InputStream is = new ByteArrayInputStream( configStr.getBytes( StandardCharsets.UTF_8.name() ) );

            certifiedSenderConfig = StreamConfiguration.create( is );
        }
        catch( Throwable ex ) {
            ex.printStackTrace();
        }

        return certifiedSenderConfig;
    }

    static public EngineConfiguration createCurlConfig( String certsPath )
    {
        EngineConfiguration curlConfig = null;

        try
        {
            JSONObject config = new JSONObject();
            JSONObject libcurlUtilsElement = new JSONObject();

            libcurlUtilsElement.put( "CURLOPT_CAPATH", certsPath );

            config.put( "libcurlUtils", libcurlUtilsElement );

            String configStr = config.toString();
            InputStream is = new ByteArrayInputStream( configStr.getBytes( StandardCharsets.UTF_8.name() ) );

            curlConfig = StreamConfiguration.create( is );
        }
        catch( Throwable ex ) {
            ex.printStackTrace();
        }

        return curlConfig;
    }


    /**
     * Factory method used to programmatically generate settings configuration data. The data generated by this method is equivalent to providing the following @c JSON values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "settings": {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>",
     *     "defaultAVSClientSettings": {
     *        "locale": "en-US"
     *     }
     *   }
     * }
     * @endcode
     *
     * @param [in] databaseFilePath SQLite database path that is used to store persistent data. If the database does not exist it will be created on initialization.
     * @param [in] locale The current locale settings on the device
     */
    static public EngineConfiguration createSettingsConfig( String databaseFilePath, String locale )
    {
        EngineConfiguration settingsConfig = null;

        try
        {
            JSONObject config = new JSONObject();
            JSONObject settingsElement = new JSONObject();

            settingsElement.put( "databaseFilePath", databaseFilePath );

            config.put( "settings", settingsElement );

            JSONObject defaultAVSClientSettingsElement = new JSONObject();

            defaultAVSClientSettingsElement.put( "locale", locale );

            settingsElement.put( "defaultAVSClientSettings", defaultAVSClientSettingsElement );

            String configStr = config.toString();
            InputStream is = new ByteArrayInputStream( configStr.getBytes( StandardCharsets.UTF_8.name() ) );

            settingsConfig = StreamConfiguration.create( is );
        }
        catch( Throwable ex ) {
            ex.printStackTrace();
        }

        return settingsConfig;
    }

    static public EngineConfiguration createSettingsConfig( String databaseFilePath ) {
        return AlexaConfiguration.createSettingsConfig( databaseFilePath, "en-US" );
    }

    /**
     * Factory method used to programmatically generate system configuration data. The data generated by this method is equivalent to providing the following @c JSON values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "aace.alexa": {
     *      "system": {
     *          "firmwareVersion": <FIRMWARE_VERSION>
     *      }
     *   }
     * }
     * @endcode
     *
     * @param [in] firmwareVersion The firmware version of the device
     */
    static public EngineConfiguration createSystemConfig( int firmwareVersion )
    {
        EngineConfiguration systemConfig = null;

        try
        {
            JSONObject config = new JSONObject();
            JSONObject aaceAlexaElement = new JSONObject();

            config.put( "aace.alexa", aaceAlexaElement );

            JSONObject systemElement = new JSONObject();

            systemElement.put( "firmwareVersion", firmwareVersion );

            aaceAlexaElement.put( "system", systemElement );

            String configStr = config.toString();
            InputStream is = new ByteArrayInputStream( configStr.getBytes( StandardCharsets.UTF_8.name() ) );

            systemConfig = StreamConfiguration.create( is );
        }
        catch( Throwable ex ) {
            ex.printStackTrace();
        }

        return systemConfig;
    }
};
