/*
 * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#ifndef AACE_ALEXA_ALEXA_CONFIGURATION_H
#define AACE_ALEXA_ALEXA_CONFIGURATION_H

#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <memory>

#include "AACE/Core/EngineConfiguration.h"

/** @file */

namespace aace {
namespace alexa {
namespace config {

/**
 * The @c AlexaConfiguration class is a factory interface for creating Alexa configuration objects.
 */
class AlexaConfiguration {
public:
    /**
     * Factory method used to programmatically generate authorization configuration data.
     * The data generated by this method is equivalent to providing the following @c JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "authDelegate":
     *   {
     *     "clientId": "<CLIENTID>",
     *     "clientSecret": "<CLIENTSECRET>",
     *     "refreshToken": "<REFRESHTOKEN>"
     *   }
     * }
     * @endcode
     *
     * @param [in] clientId The client id used to authorize your application to use AVS.
     * @param [in] clientSecret The client secret used to authorize your application to use AVS.
     * @param [in] refreshToken The refresh token used to authorize your application to use AVS.
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createAuthConfig( const std::string& clientId, const std::string& clientSecret, const std::string& refreshToken );
    
    /**
     * Factory method used to programmatically generate alerts configuration data.
     * The data generated by this method is equivalent to providing the following @c JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "alertsCapabilityAgent":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>",
     *   }
     * }
     * @endcode
     *
     * @param [in] databaseFilePath SQLite database path that is used to store persistent data.
     * If the database does not exist it will be created on initialization.
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createAlertsConfig( const std::string& databaseFilePath );
    
    /**
     * Factory method used to programmatically generate notifications configuration data.
     * The data generated by this method is equivalent to providing the following @c JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "notifications":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>",
     *   }
     * }
     * @endcode
     *
     * @param [in] databaseFilePath SQLite database path that is used to store persistent data.
     * If the database does not exist it will be created on initialization.
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createNotificationsConfig( const std::string& databaseFilePath );
    
    /**
     * Factory method used to programmatically generate certified sender configuration data.
     * The data generated by this method is equivalent to providing the following @c JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "certifiedSender":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>",
     *   }
     * }
     * @endcode
     *
     * @param [in] databaseFilePath SQLite database path that is used to store persistent data.
     * If the database does not exist it will be created on initialization.
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createCertifiedSenderConfig( const std::string& databaseFilePath );
    
    /**
     * Factory method used to programmatically generate settings configuration data.
     * The data generated by this method is equivalent to providing the following @c JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "settings": {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>",
     *     "defaultAVSClientSettings": {
     *        "locale": "en-US"
     *     }
     *   }
     * }
     * @endcode
     *
     * @param [in] databaseFilePath SQLite database path that is used to store persistent data.
     * If the database does not exist it will be created on initialization.
     * @param [in] locale The current locale settings on the device
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createSettingsConfig( const std::string& databaseFilePath, const std::string& locale = "en-US" );

    /**
     * Factory method used to programmatically generate system configuration data.
     * The data generated by this method is equivalent to providing the following @c JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "aace.alexa": {
     *      "system": {
     *          "firmwareVersion": <FIRMWARE_VERSION>
     *      }
     *   }
     * }
     * @endcode
     *
     * @param [in] firmwareVersion The firmware version of the device
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createSystemConfig( uint32_t firmwareVersion );
};

} // aace::alexa::config
} // aace::alexa
} // aace

#endif // AACE_ALEXA_ALEXA_CONFIGURATION_H
